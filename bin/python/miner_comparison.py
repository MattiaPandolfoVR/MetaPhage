#!/usr/bin/env python3
# Coded by Gioele Lazzari and Mattia Pandolfo (gioele.lazza@studenti.univr.it, mattia.pandolfo@univr.it)
software = "miner_comparison.py"
version = "0.0.1"

import os, sys
import re
import pandas as pnd
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord

assembler = sys.argv[1]

# open dereplicated clustered file (generated by CD-HIT-EST)
clstr = open("derep95_" + assembler + ".fasta.clstr", "r")
whole = clstr.read()
clstr.close()
# create the file where to print the data-frame
miner_comp = open(assembler + "_min_comp.tsv", 'w')
# create a data-frame with pandas, initializing columns
df = pnd.DataFrame(data = {
    'Cluster': [],
    'Header': [],
    'ViralOTU': [],
    'Length': [],
    'Phigaro': [],
    'Vibrant': [],
    'Virfinder': [],
    'Virsorter': []
})
# add a counter for the loop
counter = 1
# for each Cluster in .clstr 
for cluster in whole.split(">Cluster"):
    if counter == 1:
        counter += 1
        continue
    # split each rows by its newline character
    cluster_rows = cluster.split('\n')
    
    # initialize variables to populate the data-frame
    header = ''
    length = 0
    flPhigaro = False
    flVibrant = False
    flVirfinder = False
    flVirsorter = False
    # remove the last element of a row if its a ''
    if cluster_rows[-1] == '': cluster_rows.pop(-1)
    # loop from the second element [index 1]
    for row in cluster_rows[1:]:
        # if the rows ends with * its the one in which CD-HIT collapse the other
        if row.endswith('*'):
            # in header, put the header of the sequence
            header = row.replace('... *', '').split('>')[1]
            # in length, put the nucleotide length
            length = row.split('\t')[1].split('>')[0].replace('nt, ','')
        miner = row.split('>')[1].split('_')[0]
        # look for the miner flag in the sequence collapsed in this cluster, and set the correspondant flag to true 
        if miner == "vibrant": flVibrant = True
        elif miner == "phigaro": flPhigaro = True
        elif miner == "VIRSorter": flVirsorter = True
        elif miner == "virfinder": flVirfinder = True
        else: print("ERROR: strange miner here!")
    # populate the data-frame
    df = df.append({
        'Cluster': 'Cluster_' + cluster_rows[0].replace(' ', ''),
        'Header': header,
        'ViralOTU': "vOTU_" + str(counter -1),
        'Length': length,
        'Phigaro': 1 if flPhigaro else 0,
        'Vibrant': 1 if flVibrant else 0,
        'Virfinder': 1 if flVirfinder else 0,
        'Virsorter': 1 if flVirsorter else 0
    }, ignore_index=True)
    counter += 1
# change the type of miners and length cells from float to int (better visualization)
df['Phigaro'] = df['Phigaro'].astype(int)
df['Vibrant'] = df['Vibrant'].astype(int)
df['Virfinder'] = df['Virfinder'].astype(int)
df['Virsorter'] = df['Virsorter'].astype(int)
df['Length'] = df['Length'].astype(int)
# remove those cells in which nt length is less than 1000 (Evelien advice)
df_higher = df[(df['Length'] >= 1000)]
#print(df_higher.to_string())
miner_comp.write(df_higher.to_string())
miner_comp.close()

# rename the fasta sequences headers with vOTU names
# open the filtered sequences file
renamed = []
for seqrec in SeqIO.parse("filtered_derep95_" + assembler + ".fasta", 'fasta'):
    # match the sequence header with df[header] and set newid as the corresponding vOTU name
    newid = list(df[df["Header"] == seqrec.id]["ViralOTU"])
    newid = ''.join(newid)
    # append to sequence and write to file
    renamed.append(SeqRecord(seqrec.seq, id=newid, description=''))
SeqIO.write(renamed, "vOTU_" + assembler + ".fasta", 'fasta')
